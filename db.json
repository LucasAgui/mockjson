{
  "questions": [
    {
      "question": "Which is the most popular JavaScript framework?",
      "options": ["Angular", "React", "Svelte", "Vue"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which company invented React?",
      "options": ["Google", "Apple", "Netflix", "Facebook"],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "What's the fundamental building block of React apps?",
      "options": ["Components", "Blocks", "Elements", "Effects"],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "What's the name of the syntax we use to describe the UI in React components?",
      "options": ["FBJ", "Babel", "JSX", "ES2015"],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "How does data flow naturally in React apps?",
      "options": [
        "From parents to children",
        "From children to parents",
        "Both ways",
        "The developers decides"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "How to pass data into a child component?",
      "options": ["State", "Props", "PropTypes", "Parameters"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "When to use derived state?",
      "options": [
        "Whenever the state should not trigger a re-render",
        "Whenever the state can be synchronized with an effect",
        "Whenever the state should be accessible to all components",
        "Whenever the state can be computed from another state variable"
      ],
      "correctOption": 3,
      "points": 30
    },
    {
      "question": "What triggers a UI re-render in React?",
      "options": [
        "Running an effect",
        "Passing props",
        "Updating state",
        "Adding event listeners to DOM elements"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "When do we directly \"touch\" the DOM in React?",
      "options": [
        "When we need to listen to an event",
        "When we need to change the UI",
        "When we need to add styles",
        "Almost never"
      ],
      "correctOption": 3,
      "points": 20
    },
    {
      "question": "In what situation do we use a callback to update state?",
      "options": [
        "When updating the state will be slow",
        "When the updated state is very data-intensive",
        "When the state update should happen faster",
        "When the new state depends on the previous state"
      ],
      "correctOption": 3,
      "points": 30
    },
    {
      "question": "If we pass a function to useState, when will that function be called?",
      "options": [
        "On each re-render",
        "Each time we update the state",
        "Only on the initial render",
        "The first time we update the state"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "Which hook to use for an API request on the component's initial render?",
      "options": ["useState", "useEffect", "useRef", "useReducer"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which variables should go into the useEffect dependency array?",
      "options": [
        "Usually none",
        "All our state variables",
        "All state and props referenced in the effect",
        "All variables needed for clean up"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "An effect will always run on the initial render.",
      "options": [
        "True",
        "It depends on the dependency array",
        "False",
        "In depends on the code in the effect"
      ],
      "correctOption": 0,
      "points": 30
    },
    {
      "question": "When will an effect run if it doesn't have a dependency array?",
      "options": [
        "Only when the component mounts",
        "Only when the component unmounts",
        "The first time the component re-renders",
        "Each time the component is re-rendered"
      ],
      "correctOption": 3,
      "points": 20
    }
  ],
  "preguntas": [
    {
      "pregunta": "¿Cuál es el framework de JavaScript más popular?",
      "opciones": ["Angular", "React", "Svelte", "Vue"],
      "opcionCorrecta": 1,
      "puntos": 10
    },
    {
      "pregunta": "¿Qué empresa inventó React?",
      "opciones": ["Google", "Apple", "Netflix", "Facebook"],
      "opcionCorrecta": 3,
      "puntos": 10
    },
    {
      "pregunta": "¿Cuál es el bloque de construcción fundamental de las aplicaciones React?",
      "opciones": ["Componentes", "Bloques", "Elementos", "Efectos"],
      "opcionCorrecta": 0,
      "puntos": 10
    },
    {
      "pregunta": "¿Cómo se llama la sintaxis que usamos para describir la interfaz de usuario en los componentes React?",
      "opciones": ["FBJ", "Babel", "JSX", "ES2015"],
      "opcionCorrecta": 2,
      "puntos": 10
    },
    {
      "pregunta": "¿Cómo fluye naturalmente la información en las aplicaciones React?",
      "opciones": [
        "De padres a hijos",
        "De hijos a padres",
        "En ambas direcciones",
        "El desarrollador decide"
      ],
      "opcionCorrecta": 0,
      "puntos": 10
    },
    {
      "pregunta": "¿Cómo se pasa datos a un componente hijo?",
      "opciones": ["Estado", "Propiedades", "PropTypes", "Parámetros"],
      "opcionCorrecta": 1,
      "puntos": 10
    },
    {
      "pregunta": "¿Cuándo se utiliza un estado derivado?",
      "opciones": [
        "Siempre que el estado no deba provocar una nueva representación",
        "Siempre que el estado pueda sincronizarse con un efecto",
        "Siempre que el estado deba ser accesible para todos los componentes",
        "Siempre que el estado pueda calcularse a partir de otra variable de estado"
      ],
      "opcionCorrecta": 3,
      "puntos": 30
    },
    {
      "pregunta": "¿Qué provoca una nueva representación de la interfaz de usuario en React?",
      "opciones": [
        "Ejecutar un efecto",
        "Pasar propiedades",
        "Actualizar el estado",
        "Agregar escuchadores de eventos a elementos DOM"
      ],
      "opcionCorrecta": 2,
      "puntos": 20
    },
    {
      "pregunta": "¿Cuándo "tocamos" directamente el DOM en React?",
      "opciones": [
        "Cuando necesitamos escuchar un evento",
        "Cuando necesitamos cambiar la interfaz de usuario",
        "Cuando necesitamos agregar estilos",
        "Casi nunca"
      ],
      "opcionCorrecta": 3,
      "puntos": 20
    },
    {
      "pregunta": "¿En qué situación usamos una devolución de llamada para actualizar el estado?",
      "opciones": [
        "Cuando actualizar el estado llevará tiempo",
        "Cuando el estado actualizado es muy intensivo en datos",
        "Cuando la actualización del estado debe ser más rápida",
        "Cuando el nuevo estado depende del estado anterior"
      ],
      "opcionCorrecta": 3,
      "puntos": 30
    },
    {
      "pregunta": "Si pasamos una función a useState, ¿cuándo se llamará esa función?",
      "opciones": [
        "En cada nueva representación",
        "Cada vez que actualizamos el estado",
        "Solo en la representación inicial",
        "La primera vez que actualizamos el estado"
      ],
      "opcionCorrecta": 2,
      "puntos": 30
    },
    {
      "pregunta": "¿Qué gancho se utiliza para una solicitud de API en la representación inicial del componente?",
      "opciones": ["useState", "useEffect", "useRef", "useReducer"],
      "opcionCorrecta": 1,
      "puntos": 10
    },
    {
      "pregunta": "¿Qué variables deberían incluirse en la matriz de dependencias de useEffect?",
      "opciones": [
        "Por lo general, ninguna",
        "Todas nuestras variables de estado",
        "Todas las variables de estado y propiedades referenciadas en el efecto",
        "Todas las variables necesarias para la limpieza"
      ],
      "opcionCorrecta": 2,
      "puntos": 30
    },
    {
      "pregunta": "Un efecto siempre se ejecutará en la representación inicial.",
      "opciones": [
        "Verdadero",
        "Depende de la matriz de dependencias",
        "Falso",
        "Depende del código en el efecto"
      ],
      "opcionCorrecta": 0,
      "puntos": 30
    },
    {
      "pregunta": "¿Cuándo se ejecutará un efecto si no tiene una matriz de dependencias?",
      "opciones": [
        "Solo cuando el componente se monta",
        "Solo cuando el componente se desmonta",
        "La primera vez que el componente se vuelve a representar",
        "Cada vez que el componente se vuelve a representar"
      ],
      "opcionCorrecta": 3,
      "puntos": 20
    }
  ]
}
